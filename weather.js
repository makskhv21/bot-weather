const axios = require('axios');
const moment = require('moment');
const { OPENWEATHERMAP_API_KEY } = process.env;


async function getCityByCoordinates(latitude, longitude) {
    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${OPENWEATHERMAP_API_KEY}`;
    try {
        const res = await axios.get(apiUrl);
        const city = res.data.name;
        return city;
    } catch (err) {
        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é.');
    }
}

async function getWeather(city) {
    const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${OPENWEATHERMAP_API_KEY}&units=metric`;
    try {
        const res = await axios.get(apiUrl);
        return res.data;
    } catch (err) {
        throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –º—ñ—Å—Ç–∞ "${city}".`);
    }
}

function parseWeatherForecast(weatherData, days) {
    const forecasts = weatherData.list;
    const forecastsByDate = forecasts.reduce((acc, forecast) => {
        const date = moment.unix(forecast.dt).format('YYYY-MM-DD');
        if (!acc[date]) {
            acc[date] = [];
        }
        acc[date].push(forecast);
        return acc;
    }, {});

    const forecastEntries = Object.entries(forecastsByDate);
    const selectedForecasts = days === 1 ? [forecastEntries[0]] : forecastEntries.slice(0, 7);

    return selectedForecasts.map(([date, forecasts]) => {
        const formattedDate = moment(date).format('dddd, D MMMM YYYY');
        const formattedTemperatures = forecasts.map(forecast => {
            const timeOfDay = moment.unix(forecast.dt).format('HH:mm');
            const temp = formatTemperature(forecast.main.temp);
            const windSpeed = formatWindSpeed(forecast.wind.speed);
            const humidity = formatHumidity(forecast.main.humidity);

            return `‚è∞ *${timeOfDay}* - ${temp}, üå¨ ${windSpeed}, üíß ${humidity}%`;
        }).join('\n');

        return `*${formattedDate}*:\n${formattedTemperatures}`;
    }).join('\n\n');
}

function formatCityWeatherMessage(city, weatherData, forecastType) {
    const forecast = forecastType === 'today' ? parseWeatherForecast(weatherData, 1) : parseWeatherForecast(weatherData, 7);
    return `üåç *–ü–æ–≥–æ–¥–∞ –≤ –º—ñ—Å—Ç—ñ ${city}:*\n\n${forecast}\n\n‚òÄÔ∏è –ó–∞–ª–∏—à–∞–π—Ç–µ—Å—å –Ω–∞ –∑–≤'—è–∑–∫—É –∑ –Ω–∞—à–∏–º –±–æ—Ç–æ–º –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó!`;
}

function formatTemperature(temperature) {
    return isNaN(temperature) ? '*' : `${temperature.toFixed(1)}¬∞C`;
}

function formatWindSpeed(windSpeed) {
    return `${windSpeed.toFixed(1)} –º/—Å`;
}

function formatHumidity(humidity) {
    return `${humidity.toFixed(0)}`;
}

function generateWeatherShareLink(city, weatherData, forecastType) {
    const forecast = forecastType === 'today' ? parseWeatherForecast(weatherData, 1) : parseWeatherForecast(weatherData, 7);
    const message = `üåç *–ü–æ–≥–æ–¥–∞ –≤ –º—ñ—Å—Ç—ñ ${city}:*\n\n${forecast}\n\n‚òÄÔ∏è –ó–∞–ª–∏—à–∞–π—Ç–µ—Å—å –Ω–∞ –∑–≤'—è–∑–∫—É –∑ –Ω–∞—à–∏–º –±–æ—Ç–æ–º –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó!`;
    const encodedMessage = encodeURIComponent(message);
    const url = `https://t.me/share/url?url=${encodedMessage}`;
    return url;
}

module.exports = { getWeather, getCityByCoordinates, formatCityWeatherMessage, generateWeatherShareLink };