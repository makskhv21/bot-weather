const { Telegraf } = require('telegraf');
const { session, Markup } = require('telegraf');
const axios = require('axios');
const moment = require('moment');

require('dotenv').config();

const BOT_TOKEN = process.env.BOT_TOKEN;
const OPENWEATHERMAP_API_KEY = process.env.OPENWEATHERMAP_API_KEY;

const bot = new Telegraf(BOT_TOKEN);

const users = {};
bot.use(session());

async function getCityByCoordinates(latitude, longitude) {
    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${OPENWEATHERMAP_API_KEY}`;
    try {
        const res = await axios.get(apiUrl);
        const city = res.data.name;
        return city;
    } catch (err) {
        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é.');
    }
}
// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ–≥–æ–¥–∏
async function getWeather(city) {
    const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${OPENWEATHERMAP_API_KEY}&units=metric`;
    try {
        const res = await axios.get(apiUrl);
        return res.data;
    } catch (err) {
        throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –º—ñ—Å—Ç–∞ "${city}".`);
    }
}

function parseWeatherForecast(weatherData, days) {
    const forecasts = weatherData.list;
    const forecastsByDate = forecasts.reduce((acc, forecast) => {
        const date = moment.unix(forecast.dt).format('YYYY-MM-DD');  // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ "2024-11-10"
        if (!acc[date]) {
            acc[date] = [];
        }
        acc[date].push(forecast);
        return acc;
    }, {});

    const forecastEntries = Object.entries(forecastsByDate);
    const selectedForecasts = days === 1 ? [forecastEntries[0]] : forecastEntries.slice(0, 7);

    return selectedForecasts.map(([date, forecasts]) => {
        const formattedDate = moment(date).format('dddd, D MMMM YYYY');  // –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –¥–∞—Ç–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫, 10 –õ–∏—Å—Ç–æ–ø–∞–¥–∞ 2024"
        const formattedTemperatures = forecasts.map(forecast => {
            const timeOfDay = moment.unix(forecast.dt).format('HH:mm');
            const temp = formatTemperature(forecast.main.temp);
            const windSpeed = formatWindSpeed(forecast.wind.speed);
            const humidity = formatHumidity(forecast.main.humidity);

            return `‚è∞ *${timeOfDay}* - ${temp}, üå¨ ${windSpeed}, üíß ${humidity}%`;
        }).join('\n');

        return `*${formattedDate}*:\n${formattedTemperatures}`;
    }).join('\n\n');
}


function formatCityWeatherMessage(city, weatherData, forecastType) {
    const forecast = forecastType === 'today' ? parseWeatherForecast(weatherData, 1) : parseWeatherForecast(weatherData, 7);
    return `üåç *–ü–æ–≥–æ–¥–∞ –≤ –º—ñ—Å—Ç—ñ ${city}:*\n\n${forecast}\n\n‚òÄÔ∏è –ó–∞–ª–∏—à–∞–π—Ç–µ—Å—å –Ω–∞ –∑–≤'—è–∑–∫—É –∑ –Ω–∞—à–∏–º –±–æ—Ç–æ–º –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó!`;
}

function formatTemperature(temperature) {
    return isNaN(temperature) ? '*' : `${temperature.toFixed(1)}¬∞C`;
}

function formatWindSpeed(windSpeed) {
    return `${windSpeed.toFixed(1)} –º/—Å`;
}

function formatHumidity(humidity) {
    return `${humidity.toFixed(0)}`;
}

// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
const KeyboardOptions = {
    TODAY: '–î—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ–≥–æ–¥—É',
    ADD_CITY: '–î–æ–¥–∞—Ç–∏ –º—ñ—Å—Ç–æ',
    USE_LOCATION: '–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é',
};

function getMainKeyboard() {
    return Markup.keyboard([KeyboardOptions.TODAY, KeyboardOptions.ADD_CITY, KeyboardOptions.USE_LOCATION]).resize();
}

// –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç
function getCityKeyboard(userId) {
    const cities = users[userId]?.cities || [];
    const cityButtons = cities.map((city) => [
        Markup.button.callback(city, `city_${city}_today`),
        Markup.button.callback(`–ù–∞ —Ç–∏–∂–¥–µ–Ω—å`, `city_${city}_seven`),
        Markup.button.callback(`–í–∏–¥–∞–ª–∏—Ç–∏`, `remove_${city}`),
    ]);
    return Markup.inlineKeyboard(cityButtons);
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', (ctx) => {
    ctx.reply('–ü—Ä–∏–≤—ñ—Ç! –Ø –ø–æ–≥–æ–¥–Ω–∏–π –±–æ—Ç.', getMainKeyboard());
});

// –ö–æ–º–∞–Ω–¥–∞ /addcity
bot.command('addcity', (ctx) => {
    ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:');
    ctx.session.stage = 'add_city';
});

// –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞
bot.on('message', async (ctx) => {
    const userId = ctx.message.from.id;

    if (!ctx.session) {
        ctx.session = {};
    }

    if (ctx.session.stage === 'add_city') {
        const city = ctx.message.text.trim();
        try {
            await getWeather(city);
            if (!users[userId]) users[userId] = { cities: [] };
            users[userId].cities.push(city);
            ctx.reply(`–ú—ñ—Å—Ç–æ "${city}" –¥–æ–¥–∞–Ω–æ!`, getMainKeyboard());
            ctx.session.stage = undefined;
        } catch (error) {
            ctx.reply(`–ú—ñ—Å—Ç–æ "${city}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.`);
        }
    }

    if (ctx.message.text === KeyboardOptions.TODAY && users[userId]?.cities.length) {
        ctx.reply('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:', getCityKeyboard(userId));
    }

    if (ctx.message.text === KeyboardOptions.ADD_CITY) {
        ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:');
        ctx.session.stage = 'add_city';
    }
    if (ctx.message.text === KeyboardOptions.USE_LOCATION) {
        ctx.reply('–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.');
    }
    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é
    if (ctx.message.location) {
        const { latitude, longitude } = ctx.message.location;
        try {
            const city = await getCityByCoordinates(latitude, longitude);
            const weatherData = await getWeather(city);
            const weatherMessage = formatCityWeatherMessage(city, weatherData, 'today');
            ctx.reply(weatherMessage, getMainKeyboard());
        } catch (error) {
            ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é.');
        }
    }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"
bot.action(/^city_(.+)_today$/, async (ctx) => {
    const city = ctx.match[1];
    const userId = ctx.from.id;

    try {
        const weatherData = await getWeather(city);
        const weatherMessage = formatCityWeatherMessage(city, weatherData, 'today');
        ctx.reply(weatherMessage, getCityKeyboard(userId));
    } catch (error) {
        ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—Ç–∞.');
    }
});

bot.action(/^city_(.+)_seven$/, async (ctx) => {
    const city = ctx.match[1];
    const userId = ctx.from.id;

    try {
        const weatherData = await getWeather(city);
        const weatherMessage = formatCityWeatherMessage(city, weatherData, 'seven');
        ctx.reply(weatherMessage, getCityKeyboard(userId));
    } catch (error) {
        ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—Ç–∞.');
    }
});

bot.action(/^remove_(.+)$/, (ctx) => {
    const city = ctx.match[1];
    const userId = ctx.from.id;

    if (users[userId]) {
        users[userId].cities = users[userId].cities.filter((item) => item !== city);
        ctx.reply(`üóë –ú—ñ—Å—Ç–æ "${city}" –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É.`, getCityKeyboard(userId));
    } else {
        ctx.reply('‚ùå –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
});

bot.launch()
    .then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π'))
    .catch((err) => console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É:', err));